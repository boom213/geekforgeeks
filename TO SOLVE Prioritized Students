Given some student data as their name and marks, and given Q queries.The task is to insert these student's data into the priority_queue or return required element from the priority_queue based on the query.

Input:
First line of input contains number of testcases T. For each testcase, there will be Q queries. The task is to perform operation based on the queries, as below:
1. i : means insert student data into the queue
2. o : means return student data with max marks, tie break with lexicographically larger name.

Output:
For each testcase, print the required top student data as name and marks from the priority queue. If priority_queue is empty, return (empty, -1) as pair elements.

Constraints:
1 <= T <= 100
1 <= Q <= 103
1 <= marks <= 106

User Task:
Your task is to complete the functions insert() and maxFromQueue() which should insert the element into the queue and return top data from the queue respectively.

Example:
Input:
1
9
i john 100
i ankit 200
i parul 200
o
i baba 150
o
o
o
o

Output:
parul 200
ankit 200
baba 150
john 100
empty -1

Explanation:
Testcase 1: parul and ankit is having maximum marks till now but parul is lexicographically larger than ankit, so it is returned. Similarly other operations are also performed.

CODE:
{
//Initial Template for C++
#include <bits/stdc++.h>
using namespace std;
//Position this line where user code will be pasted.
// Driver code
int main() {
	
	int testcase;
	cin >> testcase;
	
	while(testcase--){
	    
	    // Declaring priority queue of pair 
	    priority_queue<pair<string, int>, vector<pair<string, int>>, compare> pq;
	    
	    int queries;
	    cin >> queries;
	    
	    for(int i = 0;i<queries;i++){
	        
	        // name and marks input
	        string input;
	        cin >> input;
	        
	        if(input == "i"){
	            string name;
	            int marks;
	            cin >> name >> marks;
	            
	            // inserting elements to priority queue
	            insert(pq, name, marks);
	            
	        }
	        else if(input == "o"){
	            
	            // deleting elements from priority queue
	            pair<string, int> ans = maxFromQueue(pq);
	            cout << ans.first << " " << ans.second << endl;
	            
	            if(!pq.empty())
	                pq.pop();
	        }
	    }
	    
	}
	
	return 0;
}
}
/*This is a function problem.You only need to complete the function given below*/
//User function Template for C++
struct compare{
    // Your comparator here
    
};
// Function to implement function insert to insert data into the priority_queue
priority_queue<pair<string, int>, vector<pair<string, int>>, compare> insert(priority_queue<pair<string, int>, vector<pair<string, int>>, compare> &pq, string name, int marks){
    
    // Your code here
    
    return pq;
    
}
// Function to implement maxFromQueue to get student with maximum makrs from priority_queue
// If marks are same, return the student with lexicographically smallest name
pair<string, int> maxFromQueue(priority_queue<pair<string, int>, vector<pair<string, int>>, compare> &pq){
    
    // Your code here
    
    
}
